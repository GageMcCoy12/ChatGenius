"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/uploadthing";
exports.ids = ["vendor-chunks/uploadthing"];
exports.modules = {

/***/ "(ssr)/./node_modules/uploadthing/client/index.js":
/*!**************************************************!*\
  !*** ./node_modules/uploadthing/client/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UploadAbortedError: () => (/* reexport safe */ _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadAbortedError),\n/* harmony export */   UploadPausedError: () => (/* reexport safe */ _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadPausedError),\n/* harmony export */   genUploader: () => (/* binding */ genUploader),\n/* harmony export */   generateClientDropzoneAccept: () => (/* reexport safe */ _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generateClientDropzoneAccept),\n/* harmony export */   generateMimeTypes: () => (/* reexport safe */ _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generateMimeTypes),\n/* harmony export */   generatePermittedFileTypes: () => (/* reexport safe */ _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generatePermittedFileTypes),\n/* harmony export */   isValidFileSize: () => (/* binding */ isValidFileSize),\n/* harmony export */   isValidFileType: () => (/* binding */ isValidFileType),\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\n/* harmony import */ var effect_Array__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! effect/Array */ \"(ssr)/./node_modules/effect/dist/esm/Array.js\");\n/* harmony import */ var effect_Micro__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! effect/Micro */ \"(ssr)/./node_modules/effect/dist/esm/Micro.js\");\n/* harmony import */ var _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @uploadthing/shared */ \"(ssr)/./node_modules/@uploadthing/shared/dist/index.js\");\n/* harmony import */ var effect_Function__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! effect/Function */ \"(ssr)/./node_modules/effect/dist/esm/Function.js\");\n\n\n\n\n\n\nvar version$1 = \"7.4.4\";\n\nconst createDeferred = ()=>{\n    let resolve;\n    let reject;\n    const ac = new AbortController();\n    const promise = new Promise((res, rej)=>{\n        resolve = res;\n        reject = rej;\n    });\n    return {\n        promise,\n        ac,\n        resolve,\n        reject\n    };\n};\n\nconst createAPIRequestUrl = (config)=>{\n    const url = new URL(config.url);\n    const queryParams = new URLSearchParams(url.search);\n    queryParams.set(\"actionType\", config.actionType);\n    queryParams.set(\"slug\", config.slug);\n    url.search = queryParams.toString();\n    return url;\n};\n/**\n * Creates a \"client\" for reporting events to the UploadThing server via the user's API endpoint.\n * Events are handled in \"./handler.ts starting at L112\"\n */ const createUTReporter = (cfg)=>(type, payload)=>effect_Micro__WEBPACK_IMPORTED_MODULE_1__.gen(function*() {\n            const url = createAPIRequestUrl({\n                url: cfg.url,\n                slug: cfg.endpoint,\n                actionType: type\n            });\n            const headers = new Headers((yield* effect_Micro__WEBPACK_IMPORTED_MODULE_1__.promise(async ()=>typeof cfg.headers === \"function\" ? await cfg.headers() : cfg.headers)));\n            headers.set(\"x-uploadthing-package\", cfg.package);\n            headers.set(\"x-uploadthing-version\", version$1);\n            headers.set(\"Content-Type\", \"application/json\");\n            const response = yield* (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.fetchEff)(url, {\n                method: \"POST\",\n                body: JSON.stringify(payload),\n                headers\n            }).pipe(effect_Micro__WEBPACK_IMPORTED_MODULE_1__.andThen(_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.parseResponseJson), /**\n         * We don't _need_ to validate the response here, just cast it for now.\n         * As of now, @effect/schema includes quite a few bytes we cut out by this...\n         * We have \"strong typing\" on the backend that ensures the shape should match.\n         */ effect_Micro__WEBPACK_IMPORTED_MODULE_1__.map(effect_Function__WEBPACK_IMPORTED_MODULE_2__.unsafeCoerce), effect_Micro__WEBPACK_IMPORTED_MODULE_1__.catchTag(\"FetchError\", (e)=>effect_Micro__WEBPACK_IMPORTED_MODULE_1__.fail(new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                    code: \"INTERNAL_CLIENT_ERROR\",\n                    message: `Failed to report event \"${type}\" to UploadThing server`,\n                    cause: e\n                }))), effect_Micro__WEBPACK_IMPORTED_MODULE_1__.catchTag(\"BadRequestError\", (e)=>effect_Micro__WEBPACK_IMPORTED_MODULE_1__.fail(new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                    code: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.getErrorTypeFromStatusCode)(e.status),\n                    message: e.getMessage(),\n                    cause: e.json\n                }))), effect_Micro__WEBPACK_IMPORTED_MODULE_1__.catchTag(\"InvalidJson\", (e)=>effect_Micro__WEBPACK_IMPORTED_MODULE_1__.fail(new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                    code: \"INTERNAL_CLIENT_ERROR\",\n                    message: \"Failed to parse response from UploadThing server\",\n                    cause: e\n                }))));\n            return response;\n        });\n\nconst uploadWithProgress = (file, rangeStart, presigned, onUploadProgress)=>effect_Micro__WEBPACK_IMPORTED_MODULE_1__.async((resume)=>{\n        const xhr = new XMLHttpRequest();\n        xhr.open(\"PUT\", presigned.url, true);\n        xhr.setRequestHeader(\"Range\", `bytes=${rangeStart}-`);\n        xhr.setRequestHeader(\"x-uploadthing-version\", version$1);\n        xhr.responseType = \"json\";\n        let previousLoaded = 0;\n        xhr.upload.addEventListener(\"progress\", ({ loaded })=>{\n            const delta = loaded - previousLoaded;\n            onUploadProgress?.({\n                loaded,\n                delta\n            });\n            previousLoaded = loaded;\n        });\n        xhr.addEventListener(\"load\", ()=>{\n            resume(xhr.status >= 200 && xhr.status < 300 ? effect_Micro__WEBPACK_IMPORTED_MODULE_1__.succeed(xhr.response) : effect_Micro__WEBPACK_IMPORTED_MODULE_1__.die(`XHR failed ${xhr.status} ${xhr.statusText} - ${JSON.stringify(xhr.response)}`));\n        });\n        // Is there a case when the client would throw and\n        // ingest server not knowing about it? idts?\n        xhr.addEventListener(\"error\", ()=>{\n            resume(new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"UPLOAD_FAILED\"\n            }));\n        });\n        const formData = new FormData();\n        formData.append(\"file\", rangeStart > 0 ? file.slice(rangeStart) : file);\n        xhr.send(formData);\n        return effect_Micro__WEBPACK_IMPORTED_MODULE_1__.sync(()=>xhr.abort());\n    });\nconst uploadFile = (file, presigned, opts)=>(0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.fetchEff)(presigned.url, {\n        method: \"HEAD\"\n    }).pipe(effect_Micro__WEBPACK_IMPORTED_MODULE_1__.map(({ headers })=>parseInt(headers.get(\"x-ut-range-start\") ?? \"0\", 10)), effect_Micro__WEBPACK_IMPORTED_MODULE_1__.tap((start)=>opts.onUploadProgress?.({\n            delta: start,\n            loaded: start\n        })), effect_Micro__WEBPACK_IMPORTED_MODULE_1__.flatMap((start)=>uploadWithProgress(file, start, presigned, (progressEvent)=>opts.onUploadProgress?.({\n                delta: progressEvent.delta,\n                loaded: progressEvent.loaded + start\n            }))), effect_Micro__WEBPACK_IMPORTED_MODULE_1__.map(effect_Function__WEBPACK_IMPORTED_MODULE_2__.unsafeCoerce), effect_Micro__WEBPACK_IMPORTED_MODULE_1__.map((uploadResponse)=>({\n            name: file.name,\n            size: file.size,\n            key: presigned.key,\n            lastModified: file.lastModified,\n            serverData: uploadResponse.serverData,\n            url: uploadResponse.url,\n            appUrl: uploadResponse.appUrl,\n            customId: presigned.customId,\n            type: file.type,\n            fileHash: uploadResponse.fileHash\n        })));\nconst uploadFilesInternal = (endpoint, opts)=>{\n    // classic service right here\n    const reportEventToUT = createUTReporter({\n        endpoint: String(endpoint),\n        package: opts.package,\n        url: opts.url,\n        headers: opts.headers\n    });\n    const totalSize = opts.files.reduce((acc, f)=>acc + f.size, 0);\n    let totalLoaded = 0;\n    return reportEventToUT(\"upload\", {\n        input: \"input\" in opts ? opts.input : null,\n        files: opts.files.map((f)=>({\n                name: f.name,\n                size: f.size,\n                type: f.type,\n                lastModified: f.lastModified\n            }))\n    }).pipe(effect_Micro__WEBPACK_IMPORTED_MODULE_1__.flatMap((presigneds)=>effect_Micro__WEBPACK_IMPORTED_MODULE_1__.forEach(presigneds, (presigned, i)=>effect_Micro__WEBPACK_IMPORTED_MODULE_1__.flatMap(effect_Micro__WEBPACK_IMPORTED_MODULE_1__.sync(()=>opts.onUploadBegin?.({\n                    file: opts.files[i].name\n                })), ()=>uploadFile(opts.files[i], presigned, {\n                    onUploadProgress: (ev)=>{\n                        totalLoaded += ev.delta;\n                        opts.onUploadProgress?.({\n                            file: opts.files[i],\n                            progress: Math.round(ev.loaded / opts.files[i].size * 100),\n                            loaded: ev.loaded,\n                            delta: ev.delta,\n                            totalLoaded,\n                            totalProgress: Math.round(totalLoaded / totalSize * 100)\n                        });\n                    }\n                })), {\n            concurrency: 6\n        })), effect_Micro__WEBPACK_IMPORTED_MODULE_1__.provideService(_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.FetchContext, window.fetch));\n};\n\nconst version = version$1;\n/**\n * Validate that a file is of a valid type given a route config\n * @public\n */ const isValidFileType = (file, routeConfig)=>effect_Micro__WEBPACK_IMPORTED_MODULE_1__.runSync((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.matchFileType)(file, (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.objectKeys)(routeConfig)).pipe(effect_Micro__WEBPACK_IMPORTED_MODULE_1__.map((type)=>file.type.includes(type)), effect_Micro__WEBPACK_IMPORTED_MODULE_1__.orElseSucceed(()=>false)));\n/**\n * Validate that a file is of a valid size given a route config\n * @public\n */ const isValidFileSize = (file, routeConfig)=>effect_Micro__WEBPACK_IMPORTED_MODULE_1__.runSync((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.matchFileType)(file, (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.objectKeys)(routeConfig)).pipe(effect_Micro__WEBPACK_IMPORTED_MODULE_1__.flatMap((type)=>(0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.fileSizeToBytes)(routeConfig[type].maxFileSize)), effect_Micro__WEBPACK_IMPORTED_MODULE_1__.map((maxFileSize)=>file.size <= maxFileSize), effect_Micro__WEBPACK_IMPORTED_MODULE_1__.orElseSucceed(()=>false)));\n/**\n * Generate a typed uploader for a given FileRouter\n * @public\n */ const genUploader = (initOpts)=>{\n    const routeRegistry = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.createIdentityProxy)();\n    const controllableUpload = async (slug, opts)=>{\n        const uploads = new Map();\n        const endpoint = typeof slug === \"function\" ? slug(routeRegistry) : slug;\n        const utReporter = createUTReporter({\n            endpoint: String(endpoint),\n            package: initOpts.package,\n            url: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.resolveMaybeUrlArg)(initOpts?.url),\n            headers: opts.headers\n        });\n        const presigneds = await effect_Micro__WEBPACK_IMPORTED_MODULE_1__.runPromise(utReporter(\"upload\", {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            input: \"input\" in opts ? opts.input : null,\n            files: opts.files.map((f)=>({\n                    name: f.name,\n                    size: f.size,\n                    type: f.type,\n                    lastModified: f.lastModified\n                }))\n        }).pipe(effect_Micro__WEBPACK_IMPORTED_MODULE_1__.provideService(_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.FetchContext, window.fetch)));\n        const totalSize = opts.files.reduce((acc, f)=>acc + f.size, 0);\n        let totalLoaded = 0;\n        const uploadEffect = (file, presigned)=>uploadFile(file, presigned, {\n                onUploadProgress: (progressEvent)=>{\n                    totalLoaded += progressEvent.delta;\n                    opts.onUploadProgress?.({\n                        ...progressEvent,\n                        file,\n                        progress: Math.round(progressEvent.loaded / file.size * 100),\n                        totalLoaded,\n                        totalProgress: Math.round(totalLoaded / totalSize * 100)\n                    });\n                }\n            }).pipe(effect_Micro__WEBPACK_IMPORTED_MODULE_1__.provideService(_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.FetchContext, window.fetch));\n        for (const [i, p] of presigneds.entries()){\n            const file = opts.files[i];\n            const deferred = createDeferred();\n            uploads.set(file, {\n                deferred,\n                presigned: p\n            });\n            void effect_Micro__WEBPACK_IMPORTED_MODULE_1__.runPromiseExit(uploadEffect(file, p), {\n                signal: deferred.ac.signal\n            }).then((result)=>{\n                if (result._tag === \"Success\") {\n                    return deferred.resolve(result.value);\n                } else if (result.cause._tag === \"Interrupt\") {\n                    throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadPausedError();\n                }\n                throw effect_Micro__WEBPACK_IMPORTED_MODULE_1__.causeSquash(result.cause);\n            }).catch((err)=>{\n                if (err instanceof _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadPausedError) return;\n                deferred.reject(err);\n            });\n        }\n        /**\n     * Pause an ongoing upload\n     * @param file The file upload you want to pause. Can be omitted to pause all files\n     */ const pauseUpload = (file)=>{\n            const files = effect_Array__WEBPACK_IMPORTED_MODULE_3__.ensure(file ?? opts.files);\n            for (const file of files){\n                const upload = uploads.get(file);\n                if (!upload) return;\n                if (upload.deferred.ac.signal.aborted) {\n                    // Cancel the upload if it's already been paused\n                    throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadAbortedError();\n                }\n                upload.deferred.ac.abort();\n            }\n        };\n        /**\n     * Resume a paused upload\n     * @param file The file upload you want to resume. Can be omitted to resume all files\n     */ const resumeUpload = (file)=>{\n            const files = effect_Array__WEBPACK_IMPORTED_MODULE_3__.ensure(file ?? opts.files);\n            for (const file of files){\n                const upload = uploads.get(file);\n                if (!upload) throw \"No upload found\";\n                upload.deferred.ac = new AbortController();\n                void effect_Micro__WEBPACK_IMPORTED_MODULE_1__.runPromiseExit(uploadEffect(file, upload.presigned), {\n                    signal: upload.deferred.ac.signal\n                }).then((result)=>{\n                    if (result._tag === \"Success\") {\n                        return upload.deferred.resolve(result.value);\n                    } else if (result.cause._tag === \"Interrupt\") {\n                        throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadPausedError();\n                    }\n                    throw effect_Micro__WEBPACK_IMPORTED_MODULE_1__.causeSquash(result.cause);\n                }).catch((err)=>{\n                    if (err instanceof _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadPausedError) return;\n                    upload.deferred.reject(err);\n                });\n            }\n        };\n        /**\n     * Wait for an upload to complete\n     * @param file The file upload you want to wait for. Can be omitted to wait for all files\n     */ const done = async (file)=>{\n            const promises = [];\n            const files = effect_Array__WEBPACK_IMPORTED_MODULE_3__.ensure(file ?? opts.files);\n            for (const file of files){\n                const upload = uploads.get(file);\n                if (!upload) throw \"No upload found\";\n                promises.push(upload.deferred.promise);\n            }\n            const results = await Promise.all(promises);\n            return file ? results[0] : results;\n        };\n        return {\n            pauseUpload,\n            resumeUpload,\n            done\n        };\n    };\n    /**\n   * One step upload function that both requests presigned URLs\n   * and then uploads the files to UploadThing\n   */ const typedUploadFiles = (slug, opts)=>{\n        const endpoint = typeof slug === \"function\" ? slug(routeRegistry) : slug;\n        return uploadFilesInternal(endpoint, {\n            ...opts,\n            skipPolling: {},\n            url: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.resolveMaybeUrlArg)(initOpts?.url),\n            package: initOpts.package,\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            input: opts.input\n        }).pipe((effect)=>effect_Micro__WEBPACK_IMPORTED_MODULE_1__.runPromiseExit(effect, opts.signal && {\n                signal: opts.signal\n            })).then((exit)=>{\n            if (exit._tag === \"Success\") {\n                return exit.value;\n            } else if (exit.cause._tag === \"Interrupt\") {\n                throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadAbortedError();\n            }\n            throw effect_Micro__WEBPACK_IMPORTED_MODULE_1__.causeSquash(exit.cause);\n        });\n    };\n    return {\n        uploadFiles: typedUploadFiles,\n        createUpload: controllableUpload,\n        /**\n     * Identity object that can be used instead of raw strings\n     * that allows \"Go to definition\" in your IDE to bring you\n     * to the backend definition of a route.\n     */ routeRegistry\n    };\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uploadthing/client/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/uploadthing/internal/types.js":
/*!****************************************************!*\
  !*** ./node_modules/uploadthing/internal/types.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UTFiles: () => (/* binding */ UTFiles)\n/* harmony export */ });\n/**\n * Marker used to append a `customId` to the incoming file data in `.middleware()`\n * @example\n * ```ts\n * .middleware((opts) => {\n *   return {\n *     [UTFiles]: opts.files.map((file) => ({\n *       ...file,\n *       customId: generateId(),\n *     }))\n *   };\n * })\n * ```\n */ const UTFiles = Symbol(\"uploadthing-custom-id-symbol\");\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvaW50ZXJuYWwvdHlwZXMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVtQiIsInNvdXJjZXMiOlsiL1VzZXJzL2dhZ2VtY2NveS9Eb2N1bWVudHMvQ2hhdEdlbml1cy9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvaW50ZXJuYWwvdHlwZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBNYXJrZXIgdXNlZCB0byBhcHBlbmQgYSBgY3VzdG9tSWRgIHRvIHRoZSBpbmNvbWluZyBmaWxlIGRhdGEgaW4gYC5taWRkbGV3YXJlKClgXG4gKiBAZXhhbXBsZVxuICogYGBgdHNcbiAqIC5taWRkbGV3YXJlKChvcHRzKSA9PiB7XG4gKiAgIHJldHVybiB7XG4gKiAgICAgW1VURmlsZXNdOiBvcHRzLmZpbGVzLm1hcCgoZmlsZSkgPT4gKHtcbiAqICAgICAgIC4uLmZpbGUsXG4gKiAgICAgICBjdXN0b21JZDogZ2VuZXJhdGVJZCgpLFxuICogICAgIH0pKVxuICogICB9O1xuICogfSlcbiAqIGBgYFxuICovIGNvbnN0IFVURmlsZXMgPSBTeW1ib2woXCJ1cGxvYWR0aGluZy1jdXN0b20taWQtc3ltYm9sXCIpO1xuXG5leHBvcnQgeyBVVEZpbGVzIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/uploadthing/internal/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/uploadthing/next/index.js":
/*!************************************************!*\
  !*** ./node_modules/uploadthing/next/index.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UTFiles: () => (/* reexport safe */ _internal_types_js__WEBPACK_IMPORTED_MODULE_0__.UTFiles),\n/* harmony export */   createRouteHandler: () => (/* binding */ createRouteHandler),\n/* harmony export */   createUploadthing: () => (/* binding */ createUploadthing)\n/* harmony export */ });\n/* harmony import */ var effect_Effect__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! effect/Effect */ \"(rsc)/./node_modules/effect/dist/esm/Effect.js\");\n/* harmony import */ var _effect_platform__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @effect/platform */ \"(rsc)/./node_modules/@effect/platform/dist/esm/FetchHttpClient.js\");\n/* harmony import */ var _effect_platform__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @effect/platform */ \"(rsc)/./node_modules/@effect/platform/dist/esm/Headers.js\");\n/* harmony import */ var _effect_platform__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @effect/platform */ \"(rsc)/./node_modules/@effect/platform/dist/esm/HttpApp.js\");\n/* harmony import */ var _effect_platform__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @effect/platform */ \"(rsc)/./node_modules/@effect/platform/dist/esm/HttpServerResponse.js\");\n/* harmony import */ var _effect_platform__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @effect/platform */ \"(rsc)/./node_modules/@effect/platform/dist/esm/HttpServerRequest.js\");\n/* harmony import */ var _effect_platform__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @effect/platform */ \"(rsc)/./node_modules/@effect/platform/dist/esm/HttpRouter.js\");\n/* harmony import */ var _effect_platform__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @effect/platform */ \"(rsc)/./node_modules/@effect/platform/dist/esm/HttpClient.js\");\n/* harmony import */ var _effect_platform__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @effect/platform */ \"(rsc)/./node_modules/@effect/platform/dist/esm/HttpClientRequest.js\");\n/* harmony import */ var _effect_platform__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @effect/platform */ \"(rsc)/./node_modules/@effect/platform/dist/esm/HttpIncomingMessage.js\");\n/* harmony import */ var _effect_platform__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! @effect/platform */ \"(rsc)/./node_modules/@effect/platform/dist/esm/HttpClientResponse.js\");\n/* harmony import */ var _effect_platform__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! @effect/platform */ \"(rsc)/./node_modules/@effect/platform/dist/esm/HttpBody.js\");\n/* harmony import */ var effect_Config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! effect/Config */ \"(rsc)/./node_modules/effect/dist/esm/Config.js\");\n/* harmony import */ var effect_Context__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! effect/Context */ \"(rsc)/./node_modules/effect/dist/esm/Context.js\");\n/* harmony import */ var effect_Match__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! effect/Match */ \"(rsc)/./node_modules/effect/dist/esm/Match.js\");\n/* harmony import */ var effect_Redacted__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! effect/Redacted */ \"(rsc)/./node_modules/effect/dist/esm/Redacted.js\");\n/* harmony import */ var effect_Schema__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! effect/Schema */ \"(rsc)/./node_modules/effect/dist/esm/Schema.js\");\n/* harmony import */ var _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @uploadthing/shared */ \"(rsc)/./node_modules/@uploadthing/shared/dist/index.js\");\n/* harmony import */ var effect_ConfigProvider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! effect/ConfigProvider */ \"(rsc)/./node_modules/effect/dist/esm/ConfigProvider.js\");\n/* harmony import */ var effect_Stream__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! effect/Stream */ \"(rsc)/./node_modules/effect/dist/esm/Stream.js\");\n/* harmony import */ var effect_Layer__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! effect/Layer */ \"(rsc)/./node_modules/effect/dist/esm/Layer.js\");\n/* harmony import */ var effect_Logger__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! effect/Logger */ \"(rsc)/./node_modules/effect/dist/esm/Logger.js\");\n/* harmony import */ var effect_LogLevel__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! effect/LogLevel */ \"(rsc)/./node_modules/effect/dist/esm/LogLevel.js\");\n/* harmony import */ var effect_Cause__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! effect/Cause */ \"(rsc)/./node_modules/effect/dist/esm/Cause.js\");\n/* harmony import */ var effect_Data__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! effect/Data */ \"(rsc)/./node_modules/effect/dist/esm/Data.js\");\n/* harmony import */ var effect_Runtime__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! effect/Runtime */ \"(rsc)/./node_modules/effect/dist/esm/Runtime.js\");\n/* harmony import */ var effect_FiberRef__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! effect/FiberRef */ \"(rsc)/./node_modules/effect/dist/esm/FiberRef.js\");\n/* harmony import */ var effect_ManagedRuntime__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! effect/ManagedRuntime */ \"(rsc)/./node_modules/effect/dist/esm/ManagedRuntime.js\");\n/* harmony import */ var _internal_types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/types.js */ \"(rsc)/./node_modules/uploadthing/internal/types.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar version = \"7.4.4\";\n\neffect_Schema__WEBPACK_IMPORTED_MODULE_1__.Literal(..._uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.ValidContentDispositions);\neffect_Schema__WEBPACK_IMPORTED_MODULE_1__.Literal(..._uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.ValidACLs);\n/**\n * Valid options for the `?actionType` query param\n */ const ActionType = effect_Schema__WEBPACK_IMPORTED_MODULE_1__.Literal(\"upload\");\n/**\n * Valid options for the `uploadthing-hook` header\n * for requests coming from UT server\n */ const UploadThingHook = effect_Schema__WEBPACK_IMPORTED_MODULE_1__.Literal(\"callback\", \"error\");\n/**\n * =============================================================================\n * =========================== Configuration ===================================\n * =============================================================================\n */ const DecodeString = effect_Schema__WEBPACK_IMPORTED_MODULE_1__.transform(effect_Schema__WEBPACK_IMPORTED_MODULE_1__.Uint8ArrayFromSelf, effect_Schema__WEBPACK_IMPORTED_MODULE_1__.String, {\n    decode: (data)=>new TextDecoder().decode(data),\n    encode: (data)=>new TextEncoder().encode(data)\n});\nconst ParsedToken = effect_Schema__WEBPACK_IMPORTED_MODULE_1__.Struct({\n    apiKey: effect_Schema__WEBPACK_IMPORTED_MODULE_1__.Redacted(effect_Schema__WEBPACK_IMPORTED_MODULE_1__.String.pipe(effect_Schema__WEBPACK_IMPORTED_MODULE_1__.startsWith(\"sk_\"))),\n    appId: effect_Schema__WEBPACK_IMPORTED_MODULE_1__.String,\n    regions: effect_Schema__WEBPACK_IMPORTED_MODULE_1__.NonEmptyArray(effect_Schema__WEBPACK_IMPORTED_MODULE_1__.String),\n    ingestHost: effect_Schema__WEBPACK_IMPORTED_MODULE_1__.String.pipe(effect_Schema__WEBPACK_IMPORTED_MODULE_1__.optionalWith({\n        default: ()=>\"ingest.uploadthing.com\"\n    }))\n});\nconst UploadThingToken = effect_Schema__WEBPACK_IMPORTED_MODULE_1__.Uint8ArrayFromBase64.pipe(effect_Schema__WEBPACK_IMPORTED_MODULE_1__.compose(DecodeString), effect_Schema__WEBPACK_IMPORTED_MODULE_1__.compose(effect_Schema__WEBPACK_IMPORTED_MODULE_1__.parseJson(ParsedToken)));\n/**\n * =============================================================================\n * ======================== File Type Hierarchy ===============================\n * =============================================================================\n */ /**\n * Properties from the web File object, this is what the client sends when initiating an upload\n */ class FileUploadData extends effect_Schema__WEBPACK_IMPORTED_MODULE_1__.Class(\"FileUploadData\")({\n    name: effect_Schema__WEBPACK_IMPORTED_MODULE_1__.String,\n    size: effect_Schema__WEBPACK_IMPORTED_MODULE_1__.Number,\n    type: effect_Schema__WEBPACK_IMPORTED_MODULE_1__.String,\n    lastModified: effect_Schema__WEBPACK_IMPORTED_MODULE_1__.Number.pipe(effect_Schema__WEBPACK_IMPORTED_MODULE_1__.optional)\n}) {\n}\n/**\n * `.middleware()` can add a customId to the incoming file data\n */ class FileUploadDataWithCustomId extends FileUploadData.extend(\"FileUploadDataWithCustomId\")({\n    customId: effect_Schema__WEBPACK_IMPORTED_MODULE_1__.NullOr(effect_Schema__WEBPACK_IMPORTED_MODULE_1__.String)\n}) {\n}\n/**\n * When files are uploaded, we get back\n * - a key\n * - a direct URL for the file\n * - an app-specific URL for the file (useful for scoping eg. for optimization allowed origins)\n * - the hash (md5-hex) of the uploaded file's contents\n */ class UploadedFileData extends FileUploadDataWithCustomId.extend(\"UploadedFileData\")({\n    key: effect_Schema__WEBPACK_IMPORTED_MODULE_1__.String,\n    url: effect_Schema__WEBPACK_IMPORTED_MODULE_1__.String,\n    appUrl: effect_Schema__WEBPACK_IMPORTED_MODULE_1__.String,\n    fileHash: effect_Schema__WEBPACK_IMPORTED_MODULE_1__.String\n}) {\n}\n/**\n * =============================================================================\n * ======================== Server Response Schemas ============================\n * =============================================================================\n */ class NewPresignedUrl extends effect_Schema__WEBPACK_IMPORTED_MODULE_1__.Class(\"NewPresignedUrl\")({\n    url: effect_Schema__WEBPACK_IMPORTED_MODULE_1__.String,\n    key: effect_Schema__WEBPACK_IMPORTED_MODULE_1__.String,\n    customId: effect_Schema__WEBPACK_IMPORTED_MODULE_1__.NullOr(effect_Schema__WEBPACK_IMPORTED_MODULE_1__.String),\n    name: effect_Schema__WEBPACK_IMPORTED_MODULE_1__.String\n}) {\n}\nclass MetadataFetchStreamPart extends effect_Schema__WEBPACK_IMPORTED_MODULE_1__.Class(\"MetadataFetchStreamPart\")({\n    payload: effect_Schema__WEBPACK_IMPORTED_MODULE_1__.String,\n    signature: effect_Schema__WEBPACK_IMPORTED_MODULE_1__.String,\n    hook: UploadThingHook\n}) {\n}\nclass MetadataFetchResponse extends effect_Schema__WEBPACK_IMPORTED_MODULE_1__.Class(\"MetadataFetchResponse\")({\n    ok: effect_Schema__WEBPACK_IMPORTED_MODULE_1__.Boolean\n}) {\n}\nclass CallbackResultResponse extends effect_Schema__WEBPACK_IMPORTED_MODULE_1__.Class(\"CallbackResultResponse\")({\n    ok: effect_Schema__WEBPACK_IMPORTED_MODULE_1__.Boolean\n}) {\n}\n/**\n * =============================================================================\n * ======================== Client Action Payloads ============================\n * =============================================================================\n */ class UploadActionPayload extends effect_Schema__WEBPACK_IMPORTED_MODULE_1__.Class(\"UploadActionPayload\")({\n    files: effect_Schema__WEBPACK_IMPORTED_MODULE_1__.Array(FileUploadData),\n    input: effect_Schema__WEBPACK_IMPORTED_MODULE_1__.Unknown\n}) {\n}\n\n/**\n * Merge in `import.meta.env` to the built-in `process.env` provider\n * Prefix keys with `UPLOADTHING_` so we can reference just the name.\n * @example\n * process.env.UPLOADTHING_TOKEN = \"foo\"\n * Config.string(\"token\"); // Config<\"foo\">\n */ const envProvider = effect_ConfigProvider__WEBPACK_IMPORTED_MODULE_3__.fromEnv().pipe(effect_ConfigProvider__WEBPACK_IMPORTED_MODULE_3__.orElse(()=>effect_ConfigProvider__WEBPACK_IMPORTED_MODULE_3__.fromMap(new Map(Object.entries((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.filterDefinedObjectValues)(// fuck this I give up. import.meta is a mistake, someone else can fix it\n     null ?? {}))), {\n        pathDelim: \"_\"\n    })), effect_ConfigProvider__WEBPACK_IMPORTED_MODULE_3__.nested(\"uploadthing\"), effect_ConfigProvider__WEBPACK_IMPORTED_MODULE_3__.constantCase);\n/**\n * Config provider that merges the options from the object\n * and environment variables prefixed with `UPLOADTHING_`.\n * @remarks Options take precedence over environment variables.\n */ const configProvider = (options)=>effect_ConfigProvider__WEBPACK_IMPORTED_MODULE_3__.fromJson(options ?? {}).pipe(effect_ConfigProvider__WEBPACK_IMPORTED_MODULE_3__.orElse(()=>envProvider));\nconst IsDevelopment = effect_Config__WEBPACK_IMPORTED_MODULE_4__.boolean(\"isDev\").pipe(effect_Config__WEBPACK_IMPORTED_MODULE_4__.orElse(()=>effect_Config__WEBPACK_IMPORTED_MODULE_4__.succeed(typeof process !== \"undefined\" ? \"development\" : undefined).pipe(effect_Config__WEBPACK_IMPORTED_MODULE_4__.map((_)=>_ === \"development\"))), effect_Config__WEBPACK_IMPORTED_MODULE_4__.withDefault(false));\nconst UTToken = effect_Schema__WEBPACK_IMPORTED_MODULE_1__.Config(\"token\", UploadThingToken).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.catchTags({\n    ConfigError: (e)=>new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n            code: e._op === \"InvalidData\" ? \"INVALID_SERVER_CONFIG\" : \"MISSING_ENV\",\n            message: e._op === \"InvalidData\" ? \"Invalid token. A token is a base64 encoded JSON object matching { apiKey: string, appId: string, regions: string[] }.\" : \"Missing token. Please set the `UPLOADTHING_TOKEN` environment variable or provide a token manually through config.\",\n            cause: e\n        })\n}));\neffect_Config__WEBPACK_IMPORTED_MODULE_4__.string(\"apiUrl\").pipe(effect_Config__WEBPACK_IMPORTED_MODULE_4__.withDefault(\"https://api.uploadthing.com\"), effect_Config__WEBPACK_IMPORTED_MODULE_4__.mapAttempt((_)=>new URL(_)), effect_Config__WEBPACK_IMPORTED_MODULE_4__.map((url)=>url.href.replace(/\\/$/, \"\")));\nconst IngestUrl = effect_Effect__WEBPACK_IMPORTED_MODULE_5__.gen(function*() {\n    const { regions, ingestHost } = yield* UTToken;\n    const region = regions[0]; // Currently only support 1 region per app\n    return yield* effect_Config__WEBPACK_IMPORTED_MODULE_4__.string(\"ingestUrl\").pipe(effect_Config__WEBPACK_IMPORTED_MODULE_4__.withDefault(`https://${region}.${ingestHost}`), effect_Config__WEBPACK_IMPORTED_MODULE_4__.mapAttempt((_)=>new URL(_)), effect_Config__WEBPACK_IMPORTED_MODULE_4__.map((url)=>url.href.replace(/\\/$/, \"\")));\n});\n\nfunction defaultErrorFormatter(error) {\n    return {\n        message: error.message\n    };\n}\nfunction formatError(error, router) {\n    const errorFormatter = router[Object.keys(router)[0]]?.errorFormatter ?? defaultErrorFormatter;\n    return errorFormatter(error);\n}\n\nconst handleJsonLineStream = (schema, onChunk)=>(stream)=>{\n        let buf = \"\";\n        return stream.pipe(effect_Stream__WEBPACK_IMPORTED_MODULE_6__.decodeText(), effect_Stream__WEBPACK_IMPORTED_MODULE_6__.mapEffect((chunk)=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.gen(function*() {\n                buf += chunk;\n                // Scan buffer for newlines\n                const parts = buf.split(\"\\n\");\n                const validChunks = [];\n                for (const part of parts){\n                    try {\n                        // Attempt to parse chunk as JSON\n                        validChunks.push(JSON.parse(part));\n                        // Advance buffer if parsing succeeded\n                        buf = buf.slice(part.length + 1);\n                    } catch  {\n                    //\n                    }\n                }\n                yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(\"Received chunks\").pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.annotateLogs(\"chunk\", chunk), effect_Effect__WEBPACK_IMPORTED_MODULE_5__.annotateLogs(\"parsedChunks\", validChunks), effect_Effect__WEBPACK_IMPORTED_MODULE_5__.annotateLogs(\"buf\", buf));\n                return validChunks;\n            })), effect_Stream__WEBPACK_IMPORTED_MODULE_6__.mapEffect(effect_Schema__WEBPACK_IMPORTED_MODULE_1__.decodeUnknown(effect_Schema__WEBPACK_IMPORTED_MODULE_1__.Array(schema))), effect_Stream__WEBPACK_IMPORTED_MODULE_6__.mapEffect(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.forEach((part)=>onChunk(part))), effect_Stream__WEBPACK_IMPORTED_MODULE_6__.runDrain, effect_Effect__WEBPACK_IMPORTED_MODULE_5__.withLogSpan(\"handleJsonLineStream\"));\n    };\n\nconst withMinimalLogLevel = effect_Config__WEBPACK_IMPORTED_MODULE_4__.logLevel(\"logLevel\").pipe(effect_Config__WEBPACK_IMPORTED_MODULE_4__.withDefault(effect_LogLevel__WEBPACK_IMPORTED_MODULE_7__.Info), effect_Effect__WEBPACK_IMPORTED_MODULE_5__.andThen((level)=>effect_Logger__WEBPACK_IMPORTED_MODULE_8__.minimumLogLevel(level)), effect_Effect__WEBPACK_IMPORTED_MODULE_5__.tapError((e)=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logError(\"Invalid log level\").pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.annotateLogs(\"error\", e))), effect_Effect__WEBPACK_IMPORTED_MODULE_5__.catchTag(\"ConfigError\", (e)=>new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n        code: \"INVALID_SERVER_CONFIG\",\n        message: \"Invalid server configuration\",\n        cause: e\n    })), effect_Layer__WEBPACK_IMPORTED_MODULE_9__.unwrapEffect);\nconst LogFormat = effect_Config__WEBPACK_IMPORTED_MODULE_4__.literal(\"json\", \"logFmt\", \"structured\", \"pretty\")(\"logFormat\");\nconst withLogFormat = effect_Effect__WEBPACK_IMPORTED_MODULE_5__.gen(function*() {\n    const isDev = yield* IsDevelopment;\n    const logFormat = yield* LogFormat.pipe(effect_Config__WEBPACK_IMPORTED_MODULE_4__.withDefault(isDev ? \"pretty\" : \"json\"));\n    return effect_Logger__WEBPACK_IMPORTED_MODULE_8__[logFormat];\n}).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.catchTag(\"ConfigError\", (e)=>new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n        code: \"INVALID_SERVER_CONFIG\",\n        message: \"Invalid server configuration\",\n        cause: e\n    })), effect_Layer__WEBPACK_IMPORTED_MODULE_9__.unwrapEffect);\nconst logHttpClientResponse = (message, opts)=>{\n    const mixin = opts?.mixin ?? \"json\";\n    const level = effect_LogLevel__WEBPACK_IMPORTED_MODULE_7__.fromLiteral(opts?.level ?? \"Debug\");\n    return (response)=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.flatMap(mixin !== \"None\" ? response[mixin] : effect_Effect__WEBPACK_IMPORTED_MODULE_5__[\"void\"], ()=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logWithLevel(level, `${message} (${response.status})`).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.annotateLogs(\"response\", response)));\n};\nconst logHttpClientError = (message)=>(err)=>err._tag === \"ResponseError\" ? logHttpClientResponse(message, {\n            level: \"Error\"\n        })(err.response) : effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logError(message).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.annotateLogs(\"error\", err));\n\nclass ParserError extends effect_Data__WEBPACK_IMPORTED_MODULE_10__.TaggedError(\"ParserError\") {\n    constructor(...args){\n        super(...args), this.message = \"Input validation failed. The original error with it's validation issues is in the error cause.\";\n    }\n}\nfunction getParseFn(parser) {\n    if (\"~standard\" in parser) {\n        /**\n     * Standard Schema\n     */ return async (value)=>{\n            const result = await parser[\"~standard\"].validate(value);\n            if (result.issues) {\n                throw new ParserError({\n                    cause: result.issues\n                });\n            }\n            return result.value;\n        };\n    }\n    if (\"parseAsync\" in parser && typeof parser.parseAsync === \"function\") {\n        /**\n     * Zod\n     * TODO (next major): Consider wrapping ZodError in ParserError\n     */ return parser.parseAsync;\n    }\n    if (effect_Schema__WEBPACK_IMPORTED_MODULE_1__.isSchema(parser)) {\n        /**\n     * Effect Schema\n     */ return (value)=>effect_Schema__WEBPACK_IMPORTED_MODULE_1__.decodeUnknownPromise(parser)(value).catch((error)=>{\n                throw new ParserError({\n                    cause: effect_Cause__WEBPACK_IMPORTED_MODULE_11__.squash(error[effect_Runtime__WEBPACK_IMPORTED_MODULE_12__.FiberFailureCauseId])\n                });\n            });\n    }\n    throw new Error(\"Invalid parser\");\n}\n\nclass FileSizeMismatch extends effect_Data__WEBPACK_IMPORTED_MODULE_10__.Error {\n    constructor(type, max, actual){\n        const reason = `You uploaded a ${type} file that was ${(0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.bytesToFileSize)(actual)}, but the limit for that type is ${max}`;\n        super({\n            reason\n        }), this._tag = \"FileSizeMismatch\", this.name = \"FileSizeMismatchError\";\n    }\n}\nclass FileCountMismatch extends effect_Data__WEBPACK_IMPORTED_MODULE_10__.Error {\n    constructor(type, boundtype, bound, actual){\n        const reason = `You uploaded ${actual} file(s) of type '${type}', but the ${boundtype} for that type is ${bound}`;\n        super({\n            reason\n        }), this._tag = \"FileCountMismatch\", this.name = \"FileCountMismatchError\";\n    }\n}\n// Verify that the uploaded files doesn't violate the route config,\n// e.g. uploading more videos than allowed, or a file that is larger than allowed.\n// This is double-checked on infra side, but we want to fail early to avoid network latency.\nconst assertFilesMeetConfig = (files, routeConfig)=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.gen(function*() {\n        const counts = {};\n        for (const file of files){\n            const type = yield* (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.matchFileType)(file, (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.objectKeys)(routeConfig));\n            counts[type] = (counts[type] ?? 0) + 1;\n            const sizeLimit = routeConfig[type]?.maxFileSize;\n            if (!sizeLimit) {\n                return yield* new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.InvalidRouteConfigError(type, \"maxFileSize\");\n            }\n            const sizeLimitBytes = yield* (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.fileSizeToBytes)(sizeLimit);\n            if (file.size > sizeLimitBytes) {\n                return yield* new FileSizeMismatch(type, sizeLimit, file.size);\n            }\n        }\n        for(const _key in counts){\n            const key = _key;\n            const config = routeConfig[key];\n            if (!config) return yield* new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.InvalidRouteConfigError(key);\n            const count = counts[key];\n            const min = config.minFileCount;\n            const max = config.maxFileCount;\n            if (min > max) {\n                return yield* new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n                    code: \"BAD_REQUEST\",\n                    message: \"Invalid config during file count - minFileCount > maxFileCount\",\n                    cause: `minFileCount must be less than maxFileCount for key ${key}. got: ${min} > ${max}`\n                });\n            }\n            if (count < min) {\n                return yield* new FileCountMismatch(key, \"minimum\", min, count);\n            }\n            if (count > max) {\n                return yield* new FileCountMismatch(key, \"maximum\", max, count);\n            }\n        }\n        return null;\n    });\nconst extractRouterConfig = (router)=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.forEach((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.objectKeys)(router), (slug)=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.map((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.fillInputRouteConfig)(router[slug].routerConfig), (config)=>({\n                slug,\n                config\n            })));\n\nconst makeRuntime = (fetch, config)=>{\n    const fetchHttpClient = effect_Layer__WEBPACK_IMPORTED_MODULE_9__.provideMerge(_effect_platform__WEBPACK_IMPORTED_MODULE_13__.layer, effect_Layer__WEBPACK_IMPORTED_MODULE_9__.succeed(_effect_platform__WEBPACK_IMPORTED_MODULE_13__.Fetch, fetch));\n    const withRedactedHeaders = effect_Layer__WEBPACK_IMPORTED_MODULE_9__.effectDiscard(effect_FiberRef__WEBPACK_IMPORTED_MODULE_14__.update(_effect_platform__WEBPACK_IMPORTED_MODULE_15__.currentRedactedNames, (_)=>_.concat([\n            \"x-uploadthing-api-key\"\n        ])));\n    const layer = effect_Layer__WEBPACK_IMPORTED_MODULE_9__.provide(effect_Layer__WEBPACK_IMPORTED_MODULE_9__.mergeAll(withLogFormat, withMinimalLogLevel, fetchHttpClient, withRedactedHeaders), effect_Layer__WEBPACK_IMPORTED_MODULE_9__.setConfigProvider(configProvider(config)));\n    return effect_ManagedRuntime__WEBPACK_IMPORTED_MODULE_16__.make(layer);\n};\n\nclass AdapterArguments extends effect_Context__WEBPACK_IMPORTED_MODULE_17__.Tag(\"uploadthing/AdapterArguments\")() {\n}\nconst makeAdapterHandler = (makeAdapterArgs, toRequest, opts, beAdapter)=>{\n    const managed = makeRuntime(opts.config?.fetch, opts.config);\n    const handle = effect_Effect__WEBPACK_IMPORTED_MODULE_5__.promise(()=>managed.runtime().then(_effect_platform__WEBPACK_IMPORTED_MODULE_18__.toWebHandlerRuntime));\n    const app = (...args)=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.map(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.promise(()=>managed.runPromise(createRequestHandler(opts, beAdapter))), effect_Effect__WEBPACK_IMPORTED_MODULE_5__.provideServiceEffect(AdapterArguments, makeAdapterArgs(...args)));\n    return async (...args)=>{\n        const result = await handle.pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.ap(app(...args)), effect_Effect__WEBPACK_IMPORTED_MODULE_5__.ap(toRequest(...args)), effect_Effect__WEBPACK_IMPORTED_MODULE_5__.withLogSpan(\"requestHandler\"), managed.runPromise);\n        return result;\n    };\n};\nconst createRequestHandler = (opts, beAdapter)=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.gen(function*() {\n        const isDevelopment = yield* IsDevelopment;\n        const routerConfig = yield* extractRouterConfig(opts.router);\n        const handleDaemon = (()=>{\n            if (opts.config?.handleDaemonPromise) {\n                return opts.config.handleDaemonPromise;\n            }\n            return isDevelopment ? \"void\" : \"await\";\n        })();\n        if (isDevelopment && handleDaemon === \"await\") {\n            return yield* new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n                code: \"INVALID_SERVER_CONFIG\",\n                message: 'handleDaemonPromise: \"await\" is forbidden in development.'\n            });\n        }\n        const GET = effect_Effect__WEBPACK_IMPORTED_MODULE_5__.gen(function*() {\n            return yield* _effect_platform__WEBPACK_IMPORTED_MODULE_19__.json(routerConfig);\n        });\n        const POST = effect_Effect__WEBPACK_IMPORTED_MODULE_5__.gen(function*() {\n            const { \"uploadthing-hook\": uploadthingHook, \"x-uploadthing-package\": fePackage, \"x-uploadthing-version\": clientVersion } = yield* _effect_platform__WEBPACK_IMPORTED_MODULE_20__.schemaHeaders(effect_Schema__WEBPACK_IMPORTED_MODULE_1__.Struct({\n                \"uploadthing-hook\": UploadThingHook.pipe(effect_Schema__WEBPACK_IMPORTED_MODULE_1__.optional),\n                \"x-uploadthing-package\": effect_Schema__WEBPACK_IMPORTED_MODULE_1__.String.pipe(effect_Schema__WEBPACK_IMPORTED_MODULE_1__.optionalWith({\n                    default: ()=>\"unknown\"\n                })),\n                \"x-uploadthing-version\": effect_Schema__WEBPACK_IMPORTED_MODULE_1__.String.pipe(effect_Schema__WEBPACK_IMPORTED_MODULE_1__.optionalWith({\n                    default: ()=>version\n                }))\n            }));\n            if (clientVersion !== version) {\n                const serverVersion = version;\n                yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logWarning(\"Client version mismatch. Things may not work as expected, please sync your versions to ensure compatibility.\").pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.annotateLogs({\n                    clientVersion,\n                    serverVersion\n                }));\n            }\n            const { slug, actionType } = yield* _effect_platform__WEBPACK_IMPORTED_MODULE_21__.schemaParams(effect_Schema__WEBPACK_IMPORTED_MODULE_1__.Struct({\n                actionType: ActionType.pipe(effect_Schema__WEBPACK_IMPORTED_MODULE_1__.optional),\n                slug: effect_Schema__WEBPACK_IMPORTED_MODULE_1__.String\n            }));\n            const uploadable = opts.router[slug];\n            if (!uploadable) {\n                const msg = `No file route found for slug ${slug}`;\n                yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logError(msg);\n                return yield* new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n                    code: \"NOT_FOUND\",\n                    message: msg\n                });\n            }\n            const { body, fiber } = yield* effect_Match__WEBPACK_IMPORTED_MODULE_22__.value({\n                actionType,\n                uploadthingHook\n            }).pipe(effect_Match__WEBPACK_IMPORTED_MODULE_22__.when({\n                actionType: \"upload\",\n                uploadthingHook: undefined\n            }, ()=>handleUploadAction({\n                    uploadable,\n                    fePackage,\n                    beAdapter,\n                    slug\n                })), effect_Match__WEBPACK_IMPORTED_MODULE_22__.when({\n                actionType: undefined,\n                uploadthingHook: \"callback\"\n            }, ()=>handleCallbackRequest({\n                    uploadable,\n                    fePackage,\n                    beAdapter\n                })), effect_Match__WEBPACK_IMPORTED_MODULE_22__.when({\n                actionType: undefined,\n                uploadthingHook: \"error\"\n            }, ()=>handleErrorRequest({\n                    uploadable\n                })), effect_Match__WEBPACK_IMPORTED_MODULE_22__.orElse(()=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.succeed({\n                    body: null,\n                    fiber: null\n                })));\n            if (fiber) {\n                yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(\"Running fiber as daemon\").pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.annotateLogs(\"handleDaemon\", handleDaemon));\n                if (handleDaemon === \"void\") ; else if (handleDaemon === \"await\") {\n                    yield* fiber.await;\n                } else if (typeof handleDaemon === \"function\") {\n                    handleDaemon(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.runPromise(fiber.await));\n                }\n            }\n            yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(\"Sending response\").pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.annotateLogs(\"body\", body));\n            return yield* _effect_platform__WEBPACK_IMPORTED_MODULE_19__.json(body);\n        }).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.catchTags({\n            ParseError: (e)=>_effect_platform__WEBPACK_IMPORTED_MODULE_19__.json(formatError(new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n                    code: \"BAD_REQUEST\",\n                    message: \"Invalid input\",\n                    cause: e.message\n                }), opts.router), {\n                    status: 400\n                }),\n            UploadThingError: (e)=>// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n                _effect_platform__WEBPACK_IMPORTED_MODULE_19__.json(formatError(e, opts.router), {\n                    status: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.getStatusCodeFromError)(e)\n                })\n        }));\n        const appendResponseHeaders = effect_Effect__WEBPACK_IMPORTED_MODULE_5__.map(_effect_platform__WEBPACK_IMPORTED_MODULE_19__.setHeader(\"x-uploadthing-version\", version));\n        return _effect_platform__WEBPACK_IMPORTED_MODULE_21__.empty.pipe(_effect_platform__WEBPACK_IMPORTED_MODULE_21__.get(\"*\", GET), _effect_platform__WEBPACK_IMPORTED_MODULE_21__.post(\"*\", POST), _effect_platform__WEBPACK_IMPORTED_MODULE_21__.use(appendResponseHeaders));\n    }).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.withLogSpan(\"createRequestHandler\"));\nconst handleErrorRequest = (opts)=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.gen(function*() {\n        const { uploadable } = opts;\n        const request = yield* _effect_platform__WEBPACK_IMPORTED_MODULE_20__.HttpServerRequest;\n        const { apiKey } = yield* UTToken;\n        const verified = yield* (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.verifySignature)((yield* request.text), request.headers[\"x-uploadthing-signature\"], apiKey);\n        yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(`Signature verified: ${verified}`);\n        if (!verified) {\n            yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logError(\"Invalid signature\");\n            return yield* new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: \"Invalid signature\"\n            });\n        }\n        const requestInput = yield* _effect_platform__WEBPACK_IMPORTED_MODULE_20__.schemaBodyJson(effect_Schema__WEBPACK_IMPORTED_MODULE_1__.Struct({\n            fileKey: effect_Schema__WEBPACK_IMPORTED_MODULE_1__.String,\n            error: effect_Schema__WEBPACK_IMPORTED_MODULE_1__.String\n        }));\n        yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(\"Handling error callback request with input:\").pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.annotateLogs(\"json\", requestInput));\n        const adapterArgs = yield* AdapterArguments;\n        const fiber = yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.tryPromise({\n            try: async ()=>uploadable.onUploadError({\n                    ...adapterArgs,\n                    error: new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n                        code: \"UPLOAD_FAILED\",\n                        message: `Upload failed for ${requestInput.fileKey}: ${requestInput.error}`\n                    }),\n                    fileKey: requestInput.fileKey\n                }),\n            catch: (error)=>new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n                    code: \"INTERNAL_SERVER_ERROR\",\n                    message: \"Failed to run onUploadError\",\n                    cause: error\n                })\n        }).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.tapError((error)=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logError(\"Failed to run onUploadError. You probably shouldn't be throwing errors here.\").pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.annotateLogs(\"error\", error)))).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.ignoreLogged, effect_Effect__WEBPACK_IMPORTED_MODULE_5__.forkDaemon);\n        return {\n            body: null,\n            fiber\n        };\n    }).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.withLogSpan(\"handleErrorRequest\"));\nconst handleCallbackRequest = (opts)=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.gen(function*() {\n        const { uploadable, fePackage, beAdapter } = opts;\n        const request = yield* _effect_platform__WEBPACK_IMPORTED_MODULE_20__.HttpServerRequest;\n        const { apiKey } = yield* UTToken;\n        const verified = yield* (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.verifySignature)((yield* request.text), request.headers[\"x-uploadthing-signature\"], apiKey);\n        yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(`Signature verified: ${verified}`);\n        if (!verified) {\n            yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logError(\"Invalid signature\");\n            return yield* new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: \"Invalid signature\"\n            });\n        }\n        const requestInput = yield* _effect_platform__WEBPACK_IMPORTED_MODULE_20__.schemaBodyJson(effect_Schema__WEBPACK_IMPORTED_MODULE_1__.Struct({\n            status: effect_Schema__WEBPACK_IMPORTED_MODULE_1__.String,\n            file: UploadedFileData,\n            metadata: effect_Schema__WEBPACK_IMPORTED_MODULE_1__.Record({\n                key: effect_Schema__WEBPACK_IMPORTED_MODULE_1__.String,\n                value: effect_Schema__WEBPACK_IMPORTED_MODULE_1__.Unknown\n            })\n        }));\n        yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(\"Handling callback request with input:\").pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.annotateLogs(\"json\", requestInput));\n        /**\n     * Run `.onUploadComplete` as a daemon to prevent the\n     * request from UT to potentially timeout.\n     */ const fiber = yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.gen(function*() {\n            const adapterArgs = yield* AdapterArguments;\n            const serverData = yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.tryPromise({\n                try: async ()=>uploadable.onUploadComplete({\n                        ...adapterArgs,\n                        file: requestInput.file,\n                        metadata: requestInput.metadata\n                    }),\n                catch: (error)=>new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n                        code: \"INTERNAL_SERVER_ERROR\",\n                        message: \"Failed to run onUploadComplete. You probably shouldn't be throwing errors here.\",\n                        cause: error\n                    })\n            });\n            const payload = {\n                fileKey: requestInput.file.key,\n                callbackData: serverData ?? null\n            };\n            yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(\"'onUploadComplete' callback finished. Sending response to UploadThing:\").pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.annotateLogs(\"callbackData\", payload));\n            const baseUrl = yield* IngestUrl;\n            const httpClient = (yield* _effect_platform__WEBPACK_IMPORTED_MODULE_23__.HttpClient).pipe(_effect_platform__WEBPACK_IMPORTED_MODULE_23__.filterStatusOk);\n            yield* _effect_platform__WEBPACK_IMPORTED_MODULE_24__.post(`/callback-result`).pipe(_effect_platform__WEBPACK_IMPORTED_MODULE_24__.prependUrl(baseUrl), _effect_platform__WEBPACK_IMPORTED_MODULE_24__.setHeaders({\n                \"x-uploadthing-api-key\": effect_Redacted__WEBPACK_IMPORTED_MODULE_25__.value(apiKey),\n                \"x-uploadthing-version\": version,\n                \"x-uploadthing-be-adapter\": beAdapter,\n                \"x-uploadthing-fe-package\": fePackage\n            }), _effect_platform__WEBPACK_IMPORTED_MODULE_24__.bodyJson(payload), effect_Effect__WEBPACK_IMPORTED_MODULE_5__.flatMap(httpClient.execute), effect_Effect__WEBPACK_IMPORTED_MODULE_5__.tapError(logHttpClientError(\"Failed to register callback result\")), effect_Effect__WEBPACK_IMPORTED_MODULE_5__.flatMap(_effect_platform__WEBPACK_IMPORTED_MODULE_26__.schemaBodyJson(CallbackResultResponse)), effect_Effect__WEBPACK_IMPORTED_MODULE_5__.tap(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.log(\"Sent callback result to UploadThing\")), effect_Effect__WEBPACK_IMPORTED_MODULE_5__.scoped);\n        }).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.ignoreLogged, effect_Effect__WEBPACK_IMPORTED_MODULE_5__.forkDaemon);\n        return {\n            body: null,\n            fiber\n        };\n    }).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.withLogSpan(\"handleCallbackRequest\"));\nconst runRouteMiddleware = (opts)=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.gen(function*() {\n        const { json: { files, input }, uploadable } = opts;\n        yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(\"Running middleware\");\n        const adapterArgs = yield* AdapterArguments;\n        const metadata = yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.tryPromise({\n            try: async ()=>uploadable.middleware({\n                    ...adapterArgs,\n                    input,\n                    files\n                }),\n            catch: (error)=>error instanceof _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError ? error : new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n                    code: \"INTERNAL_SERVER_ERROR\",\n                    message: \"Failed to run middleware\",\n                    cause: error\n                })\n        });\n        if (metadata[_internal_types_js__WEBPACK_IMPORTED_MODULE_0__.UTFiles] && metadata[_internal_types_js__WEBPACK_IMPORTED_MODULE_0__.UTFiles].length !== files.length) {\n            const msg = `Expected files override to have the same length as original files, got ${metadata[_internal_types_js__WEBPACK_IMPORTED_MODULE_0__.UTFiles].length} but expected ${files.length}`;\n            yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logError(msg);\n            return yield* new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: \"Files override must have the same length as files\",\n                cause: msg\n            });\n        }\n        // Attach customIds from middleware to the files\n        const filesWithCustomIds = yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.forEach(files, (file, idx)=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.gen(function*() {\n                const theirs = metadata[_internal_types_js__WEBPACK_IMPORTED_MODULE_0__.UTFiles]?.[idx];\n                if (theirs && theirs.size !== file.size) {\n                    yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logWarning(\"File size mismatch. Reverting to original size\");\n                }\n                return {\n                    name: theirs?.name ?? file.name,\n                    size: file.size,\n                    type: file.type,\n                    customId: theirs?.customId,\n                    lastModified: theirs?.lastModified ?? Date.now()\n                };\n            }));\n        return {\n            metadata,\n            filesWithCustomIds\n        };\n    }).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.withLogSpan(\"runRouteMiddleware\"));\nconst handleUploadAction = (opts)=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.gen(function*() {\n        const httpClient = (yield* _effect_platform__WEBPACK_IMPORTED_MODULE_23__.HttpClient).pipe(_effect_platform__WEBPACK_IMPORTED_MODULE_23__.filterStatusOk);\n        const { uploadable, fePackage, beAdapter, slug } = opts;\n        const json = yield* _effect_platform__WEBPACK_IMPORTED_MODULE_20__.schemaBodyJson(UploadActionPayload);\n        yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(\"Handling upload request\").pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.annotateLogs(\"json\", json));\n        // validate the input\n        yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(\"Parsing user input\");\n        const parsedInput = yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.tryPromise({\n            try: ()=>getParseFn(uploadable.inputParser)(json.input),\n            catch: (error)=>new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n                    code: \"BAD_REQUEST\",\n                    message: \"Invalid input\",\n                    cause: error\n                })\n        });\n        yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(\"Input parsed successfully\").pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.annotateLogs(\"input\", parsedInput));\n        const { metadata, filesWithCustomIds } = yield* runRouteMiddleware({\n            json: {\n                input: parsedInput,\n                files: json.files\n            },\n            uploadable\n        });\n        yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(\"Parsing route config\").pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.annotateLogs(\"routerConfig\", uploadable.routerConfig));\n        const parsedConfig = yield* (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.fillInputRouteConfig)(uploadable.routerConfig).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.catchTag(\"InvalidRouteConfig\", (err)=>new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: \"Invalid route config\",\n                cause: err\n            })));\n        yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(\"Route config parsed successfully\").pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.annotateLogs(\"routeConfig\", parsedConfig));\n        yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(\"Validating files meet the config requirements\").pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.annotateLogs(\"files\", json.files));\n        yield* assertFilesMeetConfig(json.files, parsedConfig).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.mapError((e)=>new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: `Invalid config: ${e._tag}`,\n                cause: \"reason\" in e ? e.reason : e.message\n            })));\n        yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(\"Files validated.\");\n        const fileUploadRequests = yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.forEach(filesWithCustomIds, (file)=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.map((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.matchFileType)(file, (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.objectKeys)(parsedConfig)), (type)=>({\n                    name: file.name,\n                    size: file.size,\n                    type: file.type || type,\n                    lastModified: file.lastModified,\n                    customId: file.customId,\n                    contentDisposition: parsedConfig[type]?.contentDisposition ?? \"inline\",\n                    acl: parsedConfig[type]?.acl\n                }))).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.catchTags({\n            /** Shouldn't happen since config is validated above so just dying is fine I think */ InvalidFileType: (e)=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.die(e),\n            UnknownFileType: (e)=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.die(e)\n        }));\n        const routeOptions = uploadable.routeOptions;\n        const { apiKey, appId } = yield* UTToken;\n        const ingestUrl = yield* IngestUrl;\n        const isDev = yield* IsDevelopment;\n        yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(\"Generating presigned URLs\").pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.annotateLogs(\"fileUploadRequests\", fileUploadRequests), effect_Effect__WEBPACK_IMPORTED_MODULE_5__.annotateLogs(\"ingestUrl\", ingestUrl));\n        const presignedUrls = yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.forEach(fileUploadRequests, (file)=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.gen(function*() {\n                const key = yield* (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.generateKey)(file, appId, routeOptions.getFileHashParts);\n                const url = yield* (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.generateSignedURL)(`${ingestUrl}/${key}`, apiKey, {\n                    ttlInSeconds: routeOptions.presignedURLTTL,\n                    data: {\n                        \"x-ut-identifier\": appId,\n                        \"x-ut-file-name\": file.name,\n                        \"x-ut-file-size\": file.size,\n                        \"x-ut-file-type\": file.type,\n                        \"x-ut-slug\": slug,\n                        \"x-ut-custom-id\": file.customId,\n                        \"x-ut-content-disposition\": file.contentDisposition,\n                        \"x-ut-acl\": file.acl\n                    }\n                });\n                return {\n                    url,\n                    key\n                };\n            }), {\n            concurrency: \"unbounded\"\n        });\n        const serverReq = yield* _effect_platform__WEBPACK_IMPORTED_MODULE_20__.HttpServerRequest;\n        const requestUrl = yield* _effect_platform__WEBPACK_IMPORTED_MODULE_20__.toURL(serverReq);\n        const devHookRequest = yield* effect_Config__WEBPACK_IMPORTED_MODULE_4__.string(\"callbackUrl\").pipe(effect_Config__WEBPACK_IMPORTED_MODULE_4__.withDefault(requestUrl.origin + requestUrl.pathname), effect_Effect__WEBPACK_IMPORTED_MODULE_5__.map((url)=>_effect_platform__WEBPACK_IMPORTED_MODULE_24__.post(url).pipe(_effect_platform__WEBPACK_IMPORTED_MODULE_24__.appendUrlParam(\"slug\", slug))));\n        const metadataRequest = _effect_platform__WEBPACK_IMPORTED_MODULE_24__.post(\"/route-metadata\").pipe(_effect_platform__WEBPACK_IMPORTED_MODULE_24__.prependUrl(ingestUrl), _effect_platform__WEBPACK_IMPORTED_MODULE_24__.setHeaders({\n            \"x-uploadthing-api-key\": effect_Redacted__WEBPACK_IMPORTED_MODULE_25__.value(apiKey),\n            \"x-uploadthing-version\": version,\n            \"x-uploadthing-be-adapter\": beAdapter,\n            \"x-uploadthing-fe-package\": fePackage\n        }), _effect_platform__WEBPACK_IMPORTED_MODULE_24__.bodyJson({\n            fileKeys: presignedUrls.map(({ key })=>key),\n            metadata: metadata,\n            isDev,\n            callbackUrl: devHookRequest.url,\n            callbackSlug: slug,\n            awaitServerData: routeOptions.awaitServerData ?? true\n        }), effect_Effect__WEBPACK_IMPORTED_MODULE_5__.flatMap(httpClient.execute));\n        // Send metadata to UT server (non blocking as a daemon)\n        // In dev, keep the stream open and simulate the callback requests as\n        // files complete uploading\n        const fiber = yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__[\"if\"](isDev, {\n            onTrue: ()=>metadataRequest.pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.tapBoth({\n                    onSuccess: logHttpClientResponse(\"Registered metadata\", {\n                        mixin: \"None\"\n                    }),\n                    onFailure: logHttpClientError(\"Failed to register metadata\")\n                }), _effect_platform__WEBPACK_IMPORTED_MODULE_27__.stream, handleJsonLineStream(MetadataFetchStreamPart, (chunk)=>devHookRequest.pipe(_effect_platform__WEBPACK_IMPORTED_MODULE_24__.setHeaders({\n                        \"uploadthing-hook\": chunk.hook,\n                        \"x-uploadthing-signature\": chunk.signature\n                    }), _effect_platform__WEBPACK_IMPORTED_MODULE_24__.setBody(_effect_platform__WEBPACK_IMPORTED_MODULE_28__.text(chunk.payload, \"application/json\")), httpClient.execute, effect_Effect__WEBPACK_IMPORTED_MODULE_5__.tapBoth({\n                        onSuccess: logHttpClientResponse(\"Successfully forwarded callback request from dev stream\"),\n                        onFailure: logHttpClientError(\"Failed to forward callback request from dev stream\")\n                    }), effect_Effect__WEBPACK_IMPORTED_MODULE_5__.annotateLogs(chunk), effect_Effect__WEBPACK_IMPORTED_MODULE_5__.asVoid, effect_Effect__WEBPACK_IMPORTED_MODULE_5__.ignoreLogged, effect_Effect__WEBPACK_IMPORTED_MODULE_5__.scoped))),\n            onFalse: ()=>metadataRequest.pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.tapBoth({\n                    onSuccess: logHttpClientResponse(\"Registered metadata\"),\n                    onFailure: logHttpClientError(\"Failed to register metadata\")\n                }), effect_Effect__WEBPACK_IMPORTED_MODULE_5__.flatMap(_effect_platform__WEBPACK_IMPORTED_MODULE_26__.schemaBodyJson(MetadataFetchResponse)), effect_Effect__WEBPACK_IMPORTED_MODULE_5__.scoped)\n        }).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.forkDaemon);\n        const presigneds = presignedUrls.map((p, i)=>({\n                url: p.url,\n                key: p.key,\n                name: fileUploadRequests[i].name,\n                customId: fileUploadRequests[i].customId ?? null\n            }));\n        yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logInfo(\"Sending presigned URLs to client\").pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.annotateLogs(\"presignedUrls\", presigneds));\n        return {\n            body: presigneds,\n            fiber\n        };\n    }).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.withLogSpan(\"handleUploadAction\"));\n\nfunction internalCreateBuilder(initDef = {}) {\n    const _def = {\n        $types: {},\n        // Default router config\n        routerConfig: {\n            image: {\n                maxFileSize: \"4MB\"\n            }\n        },\n        routeOptions: {\n            awaitServerData: true\n        },\n        inputParser: {\n            parseAsync: ()=>Promise.resolve(undefined),\n            _input: undefined,\n            _output: undefined\n        },\n        middleware: ()=>({}),\n        onUploadError: ()=>{\n        // noop\n        },\n        onUploadComplete: ()=>undefined,\n        errorFormatter: initDef.errorFormatter ?? defaultErrorFormatter,\n        // Overload with properties passed in\n        ...initDef\n    };\n    return {\n        input (userParser) {\n            return internalCreateBuilder({\n                ..._def,\n                inputParser: userParser\n            });\n        },\n        middleware (userMiddleware) {\n            return internalCreateBuilder({\n                ..._def,\n                middleware: userMiddleware\n            });\n        },\n        onUploadComplete (userUploadComplete) {\n            return {\n                ..._def,\n                onUploadComplete: userUploadComplete\n            };\n        },\n        onUploadError (userOnUploadError) {\n            return internalCreateBuilder({\n                ..._def,\n                onUploadError: userOnUploadError\n            });\n        }\n    };\n}\nfunction createBuilder(opts) {\n    return (input, config)=>{\n        return internalCreateBuilder({\n            routerConfig: input,\n            routeOptions: config ?? {},\n            ...opts\n        });\n    };\n}\n\nconst createUploadthing = (opts)=>createBuilder(opts);\nconst createRouteHandler = (opts)=>{\n    const handler = makeAdapterHandler((req)=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.succeed({\n            req,\n            res: undefined,\n            event: undefined\n        }), (req)=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.succeed(req), opts, \"nextjs-app\");\n    return {\n        POST: handler,\n        GET: handler\n    };\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/uploadthing/next/index.js\n");

/***/ })

};
;