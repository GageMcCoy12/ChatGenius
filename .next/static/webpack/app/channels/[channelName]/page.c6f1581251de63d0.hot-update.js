"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/channels/[channelName]/page",{

/***/ "(app-pages-browser)/./hooks/use-messages.ts":
/*!*******************************!*\
  !*** ./hooks/use-messages.ts ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useMessages: () => (/* binding */ useMessages)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tanstack/react-query */ \"(app-pages-browser)/./node_modules/@tanstack/react-query/build/modern/QueryClientProvider.js\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @tanstack/react-query */ \"(app-pages-browser)/./node_modules/@tanstack/react-query/build/modern/useQuery.js\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @tanstack/react-query */ \"(app-pages-browser)/./node_modules/@tanstack/react-query/build/modern/useMutation.js\");\n/* harmony import */ var _lib_pusher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/pusher */ \"(app-pages-browser)/./lib/pusher.ts\");\n\n\n\nfunction useMessages(channelId) {\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_2__.useQueryClient)();\n    const lastSentMessage = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const isSending = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    // Fetch messages\n    const { data: messages = [], isLoading, error, refetch } = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_3__.useQuery)({\n        queryKey: [\n            'messages',\n            channelId\n        ],\n        queryFn: {\n            \"useMessages.useQuery\": async ()=>{\n                const response = await fetch(\"/api/messages?channelId=\".concat(channelId));\n                if (!response.ok) {\n                    throw new Error('Failed to fetch messages');\n                }\n                return response.json();\n            }\n        }[\"useMessages.useQuery\"]\n    });\n    // Reset state when channel changes\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useMessages.useEffect\": ()=>{\n            lastSentMessage.current = null;\n            isSending.current = false;\n            return ({\n                \"useMessages.useEffect\": ()=>{\n                    lastSentMessage.current = null;\n                    isSending.current = false;\n                }\n            })[\"useMessages.useEffect\"];\n        }\n    }[\"useMessages.useEffect\"], [\n        channelId\n    ]);\n    // Send message mutation\n    const { mutateAsync: sendMessage } = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_4__.useMutation)({\n        mutationFn: {\n            \"useMessages.useMutation\": async (message)=>{\n                if (!message.text.trim() && !message.fileUrl) {\n                    throw new Error('Message is empty');\n                }\n                // Prevent concurrent sends\n                if (isSending.current) {\n                    throw new Error('Message send in progress');\n                }\n                // Prevent duplicate messages within 2 seconds\n                if (lastSentMessage.current && lastSentMessage.current.text === message.text && Date.now() - lastSentMessage.current.timestamp < 2000) {\n                    throw new Error('Duplicate message');\n                }\n                try {\n                    isSending.current = true;\n                    lastSentMessage.current = {\n                        text: message.text,\n                        timestamp: Date.now()\n                    };\n                    const response = await fetch('/api/messages', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify({\n                            text: message.text,\n                            fileUrl: message.fileUrl,\n                            channelId\n                        })\n                    });\n                    if (!response.ok) {\n                        const errorData = await response.text();\n                        throw new Error(\"Failed to send message: \".concat(response.status, \" \").concat(errorData));\n                    }\n                    return response.json();\n                } finally{\n                    isSending.current = false;\n                }\n            }\n        }[\"useMessages.useMutation\"]\n    });\n    // Update reactions mutation\n    const { mutateAsync: updateReactions } = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_4__.useMutation)({\n        mutationFn: {\n            \"useMessages.useMutation\": async (params)=>{\n                const response = await fetch(\"/api/messages/\".concat(params.messageId, \"/reactions\"), {\n                    method: 'PUT',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        reactions: params.reactions\n                    })\n                });\n                if (!response.ok) {\n                    throw new Error('Failed to update reactions');\n                }\n                return response.json();\n            }\n        }[\"useMessages.useMutation\"],\n        onSuccess: {\n            \"useMessages.useMutation\": (data, variables)=>{\n                queryClient.setQueryData([\n                    'messages',\n                    channelId\n                ], {\n                    \"useMessages.useMutation\": function() {\n                        let oldMessages = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];\n                        return oldMessages.map({\n                            \"useMessages.useMutation\": (message)=>message.id === variables.messageId ? {\n                                    ...message,\n                                    reactions: data.reactions\n                                } : message\n                        }[\"useMessages.useMutation\"]);\n                    }\n                }[\"useMessages.useMutation\"]);\n            }\n        }[\"useMessages.useMutation\"]\n    });\n    // Subscribe to real-time updates\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useMessages.useEffect\": ()=>{\n            if (!channelId) return;\n            try {\n                // Get the actual channel ID from the server first\n                fetch(\"/api/channels/resolve?channelId=\".concat(channelId)).then({\n                    \"useMessages.useEffect\": (res)=>res.json()\n                }[\"useMessages.useEffect\"]).then({\n                    \"useMessages.useEffect\": (channel)=>{\n                        if (!(channel === null || channel === void 0 ? void 0 : channel.id)) {\n                            console.error('Could not resolve channel ID');\n                            return;\n                        }\n                        const pusherChannel = _lib_pusher__WEBPACK_IMPORTED_MODULE_1__.pusherClient.subscribe(channel.id);\n                        pusherChannel.bind('new-message', {\n                            \"useMessages.useEffect\": (newMessage)=>{\n                                queryClient.setQueryData([\n                                    'messages',\n                                    channelId\n                                ], {\n                                    \"useMessages.useEffect\": function() {\n                                        let oldMessages = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];\n                                        return [\n                                            ...oldMessages,\n                                            newMessage\n                                        ];\n                                    }\n                                }[\"useMessages.useEffect\"]);\n                            }\n                        }[\"useMessages.useEffect\"]);\n                        return ({\n                            \"useMessages.useEffect\": ()=>{\n                                pusherChannel.unbind('new-message');\n                                _lib_pusher__WEBPACK_IMPORTED_MODULE_1__.pusherClient.unsubscribe(channel.id);\n                            }\n                        })[\"useMessages.useEffect\"];\n                    }\n                }[\"useMessages.useEffect\"]).catch({\n                    \"useMessages.useEffect\": (error)=>{\n                        console.error('Error resolving channel ID:', error);\n                    }\n                }[\"useMessages.useEffect\"]);\n            } catch (error) {\n                console.error('Pusher subscription error:', error);\n            }\n        }\n    }[\"useMessages.useEffect\"], [\n        channelId,\n        queryClient\n    ]);\n    return {\n        messages,\n        loading: isLoading,\n        error,\n        sendMessage,\n        refreshMessages: refetch,\n        updateReactions: (messageId, reactions)=>updateReactions({\n                messageId,\n                reactions\n            })\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2hvb2tzL3VzZS1tZXNzYWdlcy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQW9EO0FBQzBCO0FBRWxDO0FBRXJDLFNBQVNNLFlBQVlDLFNBQWlCO0lBQzNDLE1BQU1DLGNBQWNKLHFFQUFjQTtJQUNsQyxNQUFNSyxrQkFBa0JSLDZDQUFNQSxDQUE2QztJQUMzRSxNQUFNUyxZQUFZVCw2Q0FBTUEsQ0FBQztJQUV6QixpQkFBaUI7SUFDakIsTUFBTSxFQUFFVSxNQUFNQyxXQUFXLEVBQUUsRUFBRUMsU0FBUyxFQUFFQyxLQUFLLEVBQUVDLE9BQU8sRUFBRSxHQUFHYiwrREFBUUEsQ0FBQztRQUNsRWMsVUFBVTtZQUFDO1lBQVlUO1NBQVU7UUFDakNVLE9BQU87b0NBQUU7Z0JBQ1AsTUFBTUMsV0FBVyxNQUFNQyxNQUFNLDJCQUFxQyxPQUFWWjtnQkFDeEQsSUFBSSxDQUFDVyxTQUFTRSxFQUFFLEVBQUU7b0JBQ2hCLE1BQU0sSUFBSUMsTUFBTTtnQkFDbEI7Z0JBQ0EsT0FBT0gsU0FBU0ksSUFBSTtZQUN0Qjs7SUFDRjtJQUVBLG1DQUFtQztJQUNuQ3RCLGdEQUFTQTtpQ0FBQztZQUNSUyxnQkFBZ0JjLE9BQU8sR0FBRztZQUMxQmIsVUFBVWEsT0FBTyxHQUFHO1lBRXBCO3lDQUFPO29CQUNMZCxnQkFBZ0JjLE9BQU8sR0FBRztvQkFDMUJiLFVBQVVhLE9BQU8sR0FBRztnQkFDdEI7O1FBQ0Y7Z0NBQUc7UUFBQ2hCO0tBQVU7SUFFZCx3QkFBd0I7SUFDeEIsTUFBTSxFQUFFaUIsYUFBYUMsV0FBVyxFQUFFLEdBQUd0QixrRUFBV0EsQ0FBQztRQUMvQ3VCLFVBQVU7dUNBQUUsT0FBT0M7Z0JBQ2pCLElBQUksQ0FBQ0EsUUFBUUMsSUFBSSxDQUFDQyxJQUFJLE1BQU0sQ0FBQ0YsUUFBUUcsT0FBTyxFQUFFO29CQUM1QyxNQUFNLElBQUlULE1BQU07Z0JBQ2xCO2dCQUVBLDJCQUEyQjtnQkFDM0IsSUFBSVgsVUFBVWEsT0FB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OzRCQUNIOzt3QkFFQTtxREFBTztnQ0FDTEgsY0FBY0ksTUFBTSxDQUFDO2dDQUNyQnRELHFEQUFZQSxDQUFDdUQsV0FBVyxDQUFDUCxRQUFRSCxFQUFFOzRCQUNyQzs7b0JBQ0Y7NENBQ0NXLEtBQUs7NkNBQUMvQyxDQUFBQTt3QkFDTHdDLFFBQVF4QyxLQUFLLENBQUMsK0JBQStCQTtvQkFDL0M7O1lBQ0osRUFBRSxPQUFPQSxPQUFPO2dCQUNkd0MsUUFBUXhDLEtBQUssQ0FBQyw4QkFBOEJBO1lBQzlDO1FBQ0Y7Z0NBQUc7UUFBQ1A7UUFBV0M7S0FBWTtJQUUzQixPQUFPO1FBQ0xJO1FBQ0FrRCxTQUFTakQ7UUFDVEM7UUFDQVc7UUFDQXNDLGlCQUFpQmhEO1FBQ2pCMEIsaUJBQWlCLENBQUNFLFdBQW1CQyxZQUNuQ0gsZ0JBQWdCO2dCQUFFRTtnQkFBV0M7WUFBVTtJQUMzQztBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvZ2FnZW1jY295L0RvY3VtZW50cy9DaGF0R2VuaXVzL2hvb2tzL3VzZS1tZXNzYWdlcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VRdWVyeSwgdXNlTXV0YXRpb24sIHVzZVF1ZXJ5Q2xpZW50IH0gZnJvbSAnQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5JztcbmltcG9ydCB7IE1lc3NhZ2UgfSBmcm9tICdAL3R5cGVzL21lc3NhZ2VzJztcbmltcG9ydCB7IHB1c2hlckNsaWVudCB9IGZyb20gJ0AvbGliL3B1c2hlcic7XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VNZXNzYWdlcyhjaGFubmVsSWQ6IHN0cmluZykge1xuICBjb25zdCBxdWVyeUNsaWVudCA9IHVzZVF1ZXJ5Q2xpZW50KCk7XG4gIGNvbnN0IGxhc3RTZW50TWVzc2FnZSA9IHVzZVJlZjx7IHRleHQ6IHN0cmluZzsgdGltZXN0YW1wOiBudW1iZXIgfSB8IG51bGw+KG51bGwpO1xuICBjb25zdCBpc1NlbmRpbmcgPSB1c2VSZWYoZmFsc2UpO1xuXG4gIC8vIEZldGNoIG1lc3NhZ2VzXG4gIGNvbnN0IHsgZGF0YTogbWVzc2FnZXMgPSBbXSwgaXNMb2FkaW5nLCBlcnJvciwgcmVmZXRjaCB9ID0gdXNlUXVlcnkoe1xuICAgIHF1ZXJ5S2V5OiBbJ21lc3NhZ2VzJywgY2hhbm5lbElkXSxcbiAgICBxdWVyeUZuOiBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAvYXBpL21lc3NhZ2VzP2NoYW5uZWxJZD0ke2NoYW5uZWxJZH1gKTtcbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gZmV0Y2ggbWVzc2FnZXMnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgfSxcbiAgfSk7XG5cbiAgLy8gUmVzZXQgc3RhdGUgd2hlbiBjaGFubmVsIGNoYW5nZXNcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBsYXN0U2VudE1lc3NhZ2UuY3VycmVudCA9IG51bGw7XG4gICAgaXNTZW5kaW5nLmN1cnJlbnQgPSBmYWxzZTtcbiAgICBcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgbGFzdFNlbnRNZXNzYWdlLmN1cnJlbnQgPSBudWxsO1xuICAgICAgaXNTZW5kaW5nLmN1cnJlbnQgPSBmYWxzZTtcbiAgICB9O1xuICB9LCBbY2hhbm5lbElkXSk7XG5cbiAgLy8gU2VuZCBtZXNzYWdlIG11dGF0aW9uXG4gIGNvbnN0IHsgbXV0YXRlQXN5bmM6IHNlbmRNZXNzYWdlIH0gPSB1c2VNdXRhdGlvbih7XG4gICAgbXV0YXRpb25GbjogYXN5bmMgKG1lc3NhZ2U6IHsgdGV4dDogc3RyaW5nOyBmaWxlVXJsPzogc3RyaW5nIH0pID0+IHtcbiAgICAgIGlmICghbWVzc2FnZS50ZXh0LnRyaW0oKSAmJiAhbWVzc2FnZS5maWxlVXJsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTWVzc2FnZSBpcyBlbXB0eScpO1xuICAgICAgfVxuXG4gICAgICAvLyBQcmV2ZW50IGNvbmN1cnJlbnQgc2VuZHNcbiAgICAgIGlmIChpc1NlbmRpbmcuY3VycmVudCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01lc3NhZ2Ugc2VuZCBpbiBwcm9ncmVzcycpO1xuICAgICAgfVxuXG4gICAgICAvLyBQcmV2ZW50IGR1cGxpY2F0ZSBtZXNzYWdlcyB3aXRoaW4gMiBzZWNvbmRzXG4gICAgICBpZiAobGFzdFNlbnRNZXNzYWdlLmN1cnJlbnQgJiYgXG4gICAgICAgICAgbGFzdFNlbnRNZXNzYWdlLmN1cnJlbnQudGV4dCA9PT0gbWVzc2FnZS50ZXh0ICYmIFxuICAgICAgICAgIERhdGUubm93KCkgLSBsYXN0U2VudE1lc3NhZ2UuY3VycmVudC50aW1lc3RhbXAgPCAyMDAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRHVwbGljYXRlIG1lc3NhZ2UnKTtcbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgaXNTZW5kaW5nLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgICBsYXN0U2VudE1lc3NhZ2UuY3VycmVudCA9IHtcbiAgICAgICAgICB0ZXh0OiBtZXNzYWdlLnRleHQsXG4gICAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnL2FwaS9tZXNzYWdlcycsIHtcbiAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcbiAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICB0ZXh0OiBtZXNzYWdlLnRleHQsXG4gICAgICAgICAgICBmaWxlVXJsOiBtZXNzYWdlLmZpbGVVcmwsXG4gICAgICAgICAgICBjaGFubmVsSWQsXG4gICAgICAgICAgfSksXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgICBjb25zdCBlcnJvckRhdGEgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gc2VuZCBtZXNzYWdlOiAke3Jlc3BvbnNlLnN0YXR1c30gJHtlcnJvckRhdGF9YCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaXNTZW5kaW5nLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcblxuICAvLyBVcGRhdGUgcmVhY3Rpb25zIG11dGF0aW9uXG4gIGNvbnN0IHsgbXV0YXRlQXN5bmM6IHVwZGF0ZVJlYWN0aW9ucyB9ID0gdXNlTXV0YXRpb24oe1xuICAgIG11dGF0aW9uRm46IGFzeW5jIChwYXJhbXM6IHsgbWVzc2FnZUlkOiBzdHJpbmcsIHJlYWN0aW9uczogTWVzc2FnZVsncmVhY3Rpb25zJ10gfSkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgL2FwaS9tZXNzYWdlcy8ke3BhcmFtcy5tZXNzYWdlSWR9L3JlYWN0aW9uc2AsIHtcbiAgICAgICAgbWV0aG9kOiAnUFVUJyxcbiAgICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgcmVhY3Rpb25zOiBwYXJhbXMucmVhY3Rpb25zIH0pLFxuICAgICAgfSk7XG5cbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gdXBkYXRlIHJlYWN0aW9ucycpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICAgIH0sXG4gICAgb25TdWNjZXNzOiAoZGF0YSwgdmFyaWFibGVzKSA9PiB7XG4gICAgICBxdWVyeUNsaWVudC5zZXRRdWVyeURhdGEoWydtZXNzYWdlcycsIGNoYW5uZWxJZF0sIChvbGRNZXNzYWdlczogTWVzc2FnZVtdID0gW10pID0+XG4gICAgICAgIG9sZE1lc3NhZ2VzLm1hcChtZXNzYWdlID0+XG4gICAgICAgICAgbWVzc2FnZS5pZCA9PT0gdmFyaWFibGVzLm1lc3NhZ2VJZFxuICAgICAgICAgICAgPyB7IC4uLm1lc3NhZ2UsIHJlYWN0aW9uczogZGF0YS5yZWFjdGlvbnMgfVxuICAgICAgICAgICAgOiBtZXNzYWdlXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfSxcbiAgfSk7XG5cbiAgLy8gU3Vic2NyaWJlIHRvIHJlYWwtdGltZSB1cGRhdGVzXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFjaGFubmVsSWQpIHJldHVybjtcblxuICAgIHRyeSB7XG4gICAgICAvLyBHZXQgdGhlIGFjdHVhbCBjaGFubmVsIElEIGZyb20gdGhlIHNlcnZlciBmaXJzdFxuICAgICAgZmV0Y2goYC9hcGkvY2hhbm5lbHMvcmVzb2x2ZT9jaGFubmVsSWQ9JHtjaGFubmVsSWR9YClcbiAgICAgICAgLnRoZW4ocmVzID0+IHJlcy5qc29uKCkpXG4gICAgICAgIC50aGVuKGNoYW5uZWwgPT4ge1xuICAgICAgICAgIGlmICghY2hhbm5lbD8uaWQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0NvdWxkIG5vdCByZXNvbHZlIGNoYW5uZWwgSUQnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBwdXNoZXJDaGFubmVsID0gcHVzaGVyQ2xpZW50LnN1YnNjcmliZShjaGFubmVsLmlkKTtcblxuICAgICAgICAgIHB1c2hlckNoYW5uZWwuYmluZCgnbmV3LW1lc3NhZ2UnLCAobmV3TWVzc2FnZTogTWVzc2FnZSkgPT4ge1xuICAgICAgICAgICAgcXVlcnlDbGllbnQuc2V0UXVlcnlEYXRhKFsnbWVzc2FnZXMnLCBjaGFubmVsSWRdLCAob2xkTWVzc2FnZXM6IE1lc3NhZ2VbXSA9IFtdKSA9PiBbXG4gICAgICAgICAgICAgIC4uLm9sZE1lc3NhZ2VzLFxuICAgICAgICAgICAgICBuZXdNZXNzYWdlLFxuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgcHVzaGVyQ2hhbm5lbC51bmJpbmQoJ25ldy1tZXNzYWdlJyk7XG4gICAgICAgICAgICBwdXNoZXJDbGllbnQudW5zdWJzY3JpYmUoY2hhbm5lbC5pZCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciByZXNvbHZpbmcgY2hhbm5lbCBJRDonLCBlcnJvcik7XG4gICAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdQdXNoZXIgc3Vic2NyaXB0aW9uIGVycm9yOicsIGVycm9yKTtcbiAgICB9XG4gIH0sIFtjaGFubmVsSWQsIHF1ZXJ5Q2xpZW50XSk7XG5cbiAgcmV0dXJuIHtcbiAgICBtZXNzYWdlcyxcbiAgICBsb2FkaW5nOiBpc0xvYWRpbmcsXG4gICAgZXJyb3IsXG4gICAgc2VuZE1lc3NhZ2UsXG4gICAgcmVmcmVzaE1lc3NhZ2VzOiByZWZldGNoLFxuICAgIHVwZGF0ZVJlYWN0aW9uczogKG1lc3NhZ2VJZDogc3RyaW5nLCByZWFjdGlvbnM6IE1lc3NhZ2VbJ3JlYWN0aW9ucyddKSA9PiBcbiAgICAgIHVwZGF0ZVJlYWN0aW9ucyh7IG1lc3NhZ2VJZCwgcmVhY3Rpb25zIH0pLFxuICB9O1xufSAiXSwibmFtZXMiOlsidXNlRWZmZWN0IiwidXNlUmVmIiwidXNlUXVlcnkiLCJ1c2VNdXRhdGlvbiIsInVzZVF1ZXJ5Q2xpZW50IiwicHVzaGVyQ2xpZW50IiwidXNlTWVzc2FnZXMiLCJjaGFubmVsSWQiLCJxdWVyeUNsaWVudCIsImxhc3RTZW50TWVzc2FnZSIsImlzU2VuZGluZyIsImRhdGEiLCJtZXNzYWdlcyIsImlzTG9hZGluZyIsImVycm9yIiwicmVmZXRjaCIsInF1ZXJ5S2V5IiwicXVlcnlGbiIsInJlc3BvbnNlIiwiZmV0Y2giLCJvayIsIkVycm9yIiwianNvbiIsImN1cnJlbnQiLCJtdXRhdGVBc3luYyIsInNlbmRNZXNzYWdlIiwibXV0YXRpb25GbiIsIm1lc3NhZ2UiLCJ0ZXh0IiwidHJpbSIsImZpbGVVcmwiLCJEYXRlIiwibm93IiwidGltZXN0YW1wIiwibWV0aG9kIiwiaGVhZGVycyIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiZXJyb3JEYXRhIiwic3RhdHVzIiwidXBkYXRlUmVhY3Rpb25zIiwicGFyYW1zIiwibWVzc2FnZUlkIiwicmVhY3Rpb25zIiwib25TdWNjZXNzIiwidmFyaWFibGVzIiwic2V0UXVlcnlEYXRhIiwib2xkTWVzc2FnZXMiLCJtYXAiLCJpZCIsInRoZW4iLCJyZXMiLCJjaGFubmVsIiwiY29uc29sZSIsInB1c2hlckNoYW5uZWwiLCJzdWJzY3JpYmUiLCJiaW5kIiwibmV3TWVzc2FnZSIsInVuYmluZCIsInVuc3Vic2NyaWJlIiwiY2F0Y2giLCJsb2FkaW5nIiwicmVmcmVzaE1lc3NhZ2VzIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./hooks/use-messages.ts\n"));

/***/ })

});