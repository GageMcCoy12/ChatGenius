generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String          @id
  username    String          @unique
  email       String          @unique
  imageUrl    String?
  isOnline    Boolean         @default(false)
  status      String          @default("DEFAULT")
  lastSeen    DateTime        @default(now())
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  roleId      String
  channels    ChannelMember[]
  connections Connection[]
  messages    Message[]
  reactions   Reaction[]
  role        Role            @relation(fields: [roleId], references: [id])
}

model Channel {
  id        String          @id @default(cuid())
  name      String          @unique
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  members   ChannelMember[]
  messages  Message[]
}

model ChannelMember {
  id        String   @id @default(cuid())
  userId    String
  channelId String
  createdAt DateTime @default(now())
  channel   Channel  @relation(fields: [channelId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, channelId])
}

model Message {
  id          String     @id @default(cuid())
  content     String     @db.Text
  fileUrl     String?     @db.Text
  fileName    String?
  fileType    String?
  userId      String
  channelId   String
  replyToId   String?
  threadCount Int        @default(0)
  isAI        Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  channel     Channel     @relation(fields: [channelId], references: [id], onDelete: Cascade)
  replyTo     Message?    @relation("MessageReplies", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies     Message[]   @relation("MessageReplies")
  reactions   Reaction[]

  @@index([channelId])
  @@index([userId])
  @@index([replyToId])
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  messageId String
  message   Message  @relation(fields: [messageId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, messageId, emoji])
}

model Connection {
  id           String   @id @default(cuid())
  connectionId String   @unique
  userId       String
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])
}

model Role {
  id    String @id @default(cuid())
  name  String
  users User[]
}
